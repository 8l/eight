(set! , comma)

(base-signal-handler (set-info (' ((q) (print q))) 
			       (cons (cons (' function-name) (cons (' stupid-signal-handler) ())) ())))

(set! unlambda (' ((list)
		 (oif list (oif (is (car list) (' ...)) 
		    	        (unlambda (cdr list))
   			        (cons (oif (atom-p (car list)) 
				           (car list) 
				           (oif (is (car (car list))
						    (' '))
					       (car (cdr (car list)))
					       (car (car list))))
				      (unlambda (cdr list)))) ()))))

(set-info unlambda (cons (cons (' function-name) (cons (' lambda) ())) ()))

(set! leak-all (' ((list closure)
		 (oif list (leak-all (cdr list) 
				     (leak (car list) closure)) closure))))

(set-info leak-all (cons (cons (' function-name) (cons (' leak-all) ())) ()))

(set! fn (' (((' lambda-list) ... (' code))
	     (set-info (cons lambda-list 
			     (leak-all (unlambda lambda-list) code))
	    (cons (cons (' function-name) (cons (' anonymous) ())) ())))))

(set-info fn (cons (cons (' function-name) (cons (' fn) ())) ()))


(set! def (fn ((' name) (' lambda-list) ... (' code))
              (set! (, name) 
		    (set-info (fn (, lambda-list) (* code)) 	
		      (cons (cons (' function-name) 
					  (cons name ())) ())))))

(set-info def (cons (cons (' function-name) (cons (' def) ())) ()))

(def no (x) (is x ()))

(def cons-p (x) (no (atom-p x)))

(base-signal-handler (fn (q) 
			 (oif (cons-p (car (cdr q))) 
			     ((fn () 
				  (print (car (car (cdr q))))
				  (print (car (cdr (car (cdr q)))))))
			   (print "Untraditionally-formed signal. 
Try using a poem, next time."))
			 ()))


(def copylist (xs)
  (oif (no xs)
      ()
      (cons (car xs) (copylist (cdr xs)))))

(def list (... args) (copylist args))

(def assoc (key al)
  (oif (no al)
       ()
       (oif (is (car (car al)) key)
	    (cdr (car al))
	    (assoc key (cdr al)))))

(def map1 (f xs)
  (oif xs 
       (cons (f (car xs)) 
	     (map1 f (cdr xs)))))



(def newline-p (char) (is char $
))

(def open-paren-p (char) (is char $( ))

(def close-paren-p (char) (is char $) ))

(def doublequote-p (char) (is char $" )) $"

(def character-marker-p (char) (is char $$ ))

(def backslash-p (char) (is char $\ ))

(set! first-table ())
(set! rest-table ())

(def add-first-function (test function)
     (set! first-table (cons (list test function) first-table)))

(def add-rest-function (test function)
     (set! rest-table (cons (list test function) rest-table)))

(def first (xs)
     (inner-first xs first-table))

(def inner-first (xs table)
     (oif ((car (car table)) xs)
	  ((car (cdr (car table))) xs)
	  (inner-first xs (cdr table))))

(def rest (xs)
     (inner-rest xs rest-table))

(def inner-rest (xs table)
     (oif ((car (car table)) xs)
	  ((car (cdr (car table))) xs)
	  (inner-rest xs (cdr table))))

(add-first-function (fn (xs) (' t)) (fn (xs) (signal (list "

The ten thousand things unshatter
the film of an explosion
played in reverse.

error: I tried to take the first element of something I don't know how to take the first element of:" xs))))

(add-first-function (fn (xs) (cons-p xs)) (fn (xs) (car xs)))  

(add-first-function (fn (xs) (is (car (assoc (' type)
					     (get-info (car (cdr xs)))))
				 (' stream)))
		    (fn (xs) 
			(set-cdr xs (list (read-character (car (cdr xs)))
					  (car (cdr xs))))
			(car xs)))
				
	      
(add-rest-function (fn (xs) (' t)) (fn (xs) (signal (list "

a man akimbo
suddenly pulls his fist to his breast
as he quietly accumulates

error: I tried to take the rest of something I don't know how to take the rest of:" xs))))

(add-rest-function (fn (xs) (cons-p xs)) (fn (xs) (cdr xs)))  

(add-rest-function (fn (xs) (is (car (assoc (' type)
					     (get-info (car (cdr xs)))))
				 (' stream)))
		   (fn (xs) 
		       (set-cdr xs (list (read-character (car (cdr xs)))
					 (car (cdr xs))))
		       (cdr xs)))
	
(set! join cons)

(def append (xs ys ... (' yss))
  (oif xs
      (cons (car xs) (append (cdr xs) ys (* yss)))
      (oif yss
	   (append ys (* yss))
	   ys)))
		
(def pair (xs (f list)) 
     (oif (no xs)
          ()
	  (oif (no (rest xs))
	       (list (list (first xs)))
	       (join (f (first xs) (first (rest xs)))
		     (pair (rest (rest xs)) f)))))

(def with ((' parms) ... (' body))
     ((fn (, (map1 first (pair parms)))
	  (* body))
      (* (map1 (fn (x) (first (rest x))) (pair parms)))))

(def add-parse-state ((' name))
 	   (set! (, (string-to-symbol 
			(append (symbol-to-string name) 
				"-parse-table"))) ()))

(def add-parse-action ((' state) test action)
     (with (table-name (string-to-symbol 
			(append (symbol-to-string state) 
				"-parse-table")))
	   (set! (, table-name) (join (list test action) (, table-name)))))

 



"When I do the dishes
I put the glasses away
upside-down.
She does not.

error: I encountered an unexpected close parenthesis during parsing."
