(set! unlambda 
      '((list)
        (oif list
             (oif (atom-p (car list))
                  (oif (is (car list) '...)
                       (unlambda (cdr list))
                       (cons (car list) (unlambda (cdr list))))
                  (cons (car (cdr (car list)))
                        (unlambda (cdr list))))
             ())))

(set! leak-all '((list expression)
     (oif list 
          (leak-all (cdr list) 
                    (leak (car list) expression)) 
          expression)))

(set! fn '(('lambda-list ... 'code)
           (leak-all (unlambda lambda-list) 
                     (cons lambda-list code))))

# cons, car, and cdr 
(print (is (car (cons 2 ())) 2))
(print (is (car ((fn (b) (cons 2 (cons b ()))) 3)) 2))
(print (is (car (cdr (((fn (b) (fn (a) (cons a (cons b ())))) 3) 2))) 3))

# Scopes and leaking
(print (is (set! a 5) 5))
(print (is ((fn ((' b)) b) a) (' a)))
(print (is ((fn ((' b)) b) (, a)) 5))
(print (is (is ((fn (a) a) 25) 5) ()))
(print (is ((leak (' a) (fn (a) a)) 25) 25))

#oif
(print (is (oif (' a) 3 2) 3))
(print (is (oif () 3 2) 2))


# elipsis args
(print (is (car ((fn (... b) b) 3 2 3)) 3))
(print (is (car ((fn (... (' b)) b) c a 2 q)) (' c)))
(print (is (car (car ((fn (... (' b)) b) (, (cons (' c) (cons (' a) ())))))) (' c)))

# asterpend and atpend
(print (is (car ((fn (... b) b) *'((plus 3 4) 2 3))) 7))
(print (is (car ((fn (... b) b) @'(plus 3 4))) 'plus))


# call/cc
(print (is (call/cc (fn (f) (f 5) 4)) 5))
(print (is (handle-signals (fn (q) ((car q) 6)) (signal 5)) 6))
(print (is (handle-signals (fn (q) (car (cdr q))) (signal 5)) 5))
(print (is (handle-signals (fn (q) 4) (signal 5)) 4))
(print (is (handle-signals
      (fn (p) (car (cdr p)))
      (handle-signals (fn (q) 
        (unhandle-signal q)) (signal 5)))
      5))



